#!/bin/bash


  # Choose the queue on which to submit the job
  # The currently defined queues (with walltime) for the UA-HPC are:
	#     qshort	1 hour
	#     qreg	  1 day (24 hours)
	#     qlong	  3 days (72 hours)
	#     qxlong	7 days (168 hours)
	#     qxxlong	21 days (502 hours)
#PBS -q qreg


	# Send "stdout" and/or "stderr" to your home directory when the job runs
#PBS -k o    
#PBS -k e    
#PBS -koeâ€¨ 

  # send mail notification (optional)
  #   a        when job is aborted
  #   b        when job begins
  #   e        when job ends
  #   M        your e-mail address (should always be specified)
#PBS -m ae
#PBS -M marieke.louage@ugent.be

	# Send an e-mail address when a job begins execution and/or ends or aborts

  # specification (required!)
  #   nodes=   number of nodes; 1 for serial; 1 or more for parallel
  #   ppn=     number of processors per node; 1 for serial; up to 8
  #   if you want your "private" node: ppn=8
#PBS -l nodes=1:ppn=1

  # if you want to be sure to get your private node, simply claim all memory ;-)
#PBS -l pvmem=16000m

	# Specifies the amount of memory you need for a job. 
#PBS -l mem=80gb

	# Number of processes per node on a cluster. 
	# This should equal number of processors on a node in most cases.
#PBS -l mpiprocs=4

	# Give your job a unique name
#PBS -N galaxies1234

	# The number of processors to use for a shared memory job. 
#PBS ncpus=4

	# Control whether or not jobs should automatically re-run from the start 
	# if the system crashes or is rebooted. 
	# Users with checkpoints might not which this to happen.
#PBS -r n
#PBS -r y

	# Number of compute nodes to use. 
	# Usually combined with the mpiprocs directive
 #PBS -l select=2

	# Make sure that the environment in which the job runs is the same as 
	# the environment in which it was submitted.
 #PBS -V

	# Walltime: The maximum time a job can run before being stopped. 
	# If not used a default of a few minutes is used. 
	# Use this flag to prevent jobs that go bad running for hundreds of hours. 
	# Format is HH:MM:SS
#PBS -l walltime=12:00:00

  # redirect standard output (-o) and error (-e) (optional)
  # if omitted, the name of the job (specified by -N) or
  # a generic name (name of the script followed by .o or .e and 
  # job number) will be used
#PBS -o stdout.$PBS_JOBID
#PBS -e stderr.$PBS_JOBID


	# Using PBS - Environment Variables :
	#
	# When a batch job starts execution, a number of environment variables are
	# predefined, which include:
	#      Variables defined on the execution host.
	#      Variables exported from the submission host with
	#                -v (selected variables) and -V (all variables).
	#      Variables defined by PBS.
	#
	# The following reflect the environment where the user ran qsub:
	# PBS_O_HOST    The host where you ran the qsub command.
	# PBS_O_LOGNAME Your user ID where you ran qsub.
	# PBS_O_HOME    Your home directory where you ran qsub.
	# PBS_O_WORKDIR The working directory where you ran qsub.
	#
	# These reflect the environment where the job is executing:
	# PBS_ENVIRONMENT       Set to PBS_BATCH to indicate the job is a batch job,
	#         or to PBS_INTERACTIVE to indicate the job is a PBS interactive job.
	# PBS_O_QUEUE   The original queue you submitted to.
	# PBS_QUEUE     The queue the job is executing from.
	# PBS_JOBID     The job's PBS identifier.
	# PBS_JOBNAME   The job's name.


  # First clear the loaded software packages
  # Then, activate the appropriate software packages

  # go to the (current) working directory (optional, if this is the
  # directory where you submitted the job)

echo Start Job
INPUT_FILE = $filepath
CIRCUIT = $filename
#make output dir
OUTPUT_FOLDER = $VSC_DATA/vpr/output/$CIRCUIT
mkdir OUTPUT_FOLDER
date
cd $OUTPUT_FOLDER  
~/VTR/vtr-verilog-to-routing/vpr/vpr "$(< vpr_args.txt)"
echo End Job


